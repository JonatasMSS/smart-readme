import * as vscode from 'vscode';
import { GoogleGenerativeAI } from "@google/generative-ai";


export async function setApiToken(context: vscode.ExtensionContext) {

    try {
        const token = await vscode.window.showInputBox({
            title: "Insert the AI Token",
            prompt: "Insert your Api Token to proceed",
            password: true,
            placeHolder: "Ex: Aps2kss31239#iskasd___239"
        });

        if (token) {
            await context.globalState.update('apiToken', token);
            vscode.window.showInformationMessage("API token set succesfully!");
        }
        else {
            vscode.window.showWarningMessage("API token setting was cancelled!");
        }
    } catch (error: any) {
        vscode.window.showErrorMessage(`Error on setting API Token: ${error.message}`);
    }


}

export function getApiToken(context: vscode.ExtensionContext) {
    const token = context.globalState.get('apiToken');

    if (token) {
        vscode.window.showInformationMessage(`Your API Token is:${token}`);
    }
    else {
        vscode.window.showWarningMessage("You haven't set your API. Please set it first!");
    }
}

export async function resetToken(context: vscode.ExtensionContext) {
    await context.globalState.update('apiToken', undefined);
    vscode.window.showInformationMessage("Api token was removed");
}


export async function getReadmeContentFromAI(context: vscode.ExtensionContext, jsonMsg: string) {

    const token = context.globalState.get('apiToken');

    if (token) {
        const genAI = new GoogleGenerativeAI(token as string);
        const model = genAI.getGenerativeModel({
            model: "gemini-1.5-pro",
            systemInstruction: "Criativo e anal√≠tico",
        });
        const generationConfig = {
            temperature: 0.8,
            topP: 0.95,
            topK: 64,
            maxOutputTokens: 8192,
            responseMimeType: "text/plain",
        };

        const chatSession = model.startChat({
            generationConfig,
            history: [
                {
                    role: "user",
                    parts: [
                        { text: "Aja como um gerador de readme bem organizado e consistente com base em um JSON de arquivos e pastas de um projeto de programa√ß√£o.\nPor exemplo:\n{\n\"index.js\":\"Arquivo\", \"config.ts\": \"Arquivo\",\nsrc:{\n components:{\n header.tsx: \"arquivo\",\nfooter.tsx:\"arquivo\"\n}\n}\n\n}" },
                        { text: "Sua resposta: \n# Arquivo simples (titulo sugestivo)\nProjeto simples que envolve o uso de poucos elementos em React\n\n## Linguagens utilizadas:\n- Typescript\n- React\n- Javascript\n\n## Arquitetura do projeto\n\n### Pasta componentes\nNela ficam os componentes essenciais do projeto\n" },
                        { text: "Considerando esse exemplo, e estas outras sugest√µes, como:\n- Seu foco vai ser em analisar a arquitetura, poss√≠vel foco do projeto com base na arquitetura, linguagens, frameworks e bibliotecas utilizadas\n- Voc√™ poder√° criar t√≠tulos criativos com base na arquitetura de pastas que forem lhe enviadas, contanto que voc√™ coloque ao lado \"(T√≠tulo sugestivo)\" ou \"(Descri√ß√£o sugestiva)\"" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "## Entendi! üòÑ \n\nVou te ajudar a criar READMEs incr√≠veis e organizados a partir da estrutura de pastas e arquivos do seu projeto. \n\nBasta me enviar o JSON com a estrutura do projeto, como no exemplo que voc√™ deu, que eu gero um README com:\n\n* **T√≠tulo Criativo:** Sugest√µes de t√≠tulos que reflitam a proposta do projeto (com a devida indica√ß√£o de \"(Sugest√£o)\" para n√£o gerar confus√£o).\n* **Descri√ß√£o Concisa:** Uma breve descri√ß√£o do projeto e seus objetivos (se poss√≠vel inferir a partir da estrutura).\n* **Tecnologias Utilizadas:** Listagem das linguagens, frameworks e bibliotecas identificadas.\n* **Arquitetura do Projeto:**  Se√ß√µes detalhadas explicando cada pasta e seus arquivos, com base na estrutura fornecida.\n\n**Exemplo:**\n\n**Estrutura JSON:**\n\n```json\n{\n  \"index.js\": \"Arquivo\", \n  \"config.ts\": \"Arquivo\",\n  \"src\": {\n    \"components\": {\n      \"header.tsx\": \"arquivo\",\n      \"footer.tsx\": \"arquivo\"\n    },\n    \"services\": {\n      \"api.ts\": \"arquivo\"\n    }\n  }\n}\n```\n\n**Sa√≠da README.md:**\n\n```markdown\n# Interface Elegante (Sugest√£o)\n\nProjeto em React com TypeScript que parece focar na constru√ß√£o de uma interface web, possivelmente consumindo dados de uma API. \n\n## Tecnologias Utilizadas:\n\n- React\n- TypeScript\n- JavaScript \n\n## Arquitetura do Projeto\n\n### src/\n\nPasta principal contendo o c√≥digo fonte da aplica√ß√£o.\n\n#### src/components/\n\nComponentes reutiliz√°veis da interface.\n\n- `header.tsx`: Componente do cabe√ßalho da aplica√ß√£o.\n- `footer.tsx`: Componente do rodap√© da aplica√ß√£o.\n\n#### src/services/\n\nL√≥gica de comunica√ß√£o com servi√ßos externos, como APIs.\n\n- `api.ts`: Implementa√ß√£o da comunica√ß√£o com a API.\n\n### Arquivos da raiz\n\n- `index.js`: Ponto de entrada da aplica√ß√£o.\n- `config.ts`: Arquivo de configura√ß√µes da aplica√ß√£o. \n```\n\n**Observa√ß√µes:**\n\n* Quanto mais completa a estrutura do projeto no JSON, mais preciso e rico ser√° o README gerado.\n* Sinta-se √† vontade para me pedir para focar em aspectos espec√≠ficos do projeto, como \"Documente a API REST\" ou \"Explique o sistema de rotas\". \n\n**Vamos come√ßar? Me envie a estrutura do seu projeto!** üöÄ \n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "{\n  \"folders\": [\n    {\n      \"name\": \".vscode\",\n      \"type\": \"folder\"\n    },\n    {\n      \"name\": \"node_modules\",\n      \"type\": \"folder\"\n    },\n    {\n      \"name\": \"out\",\n      \"type\": \"folder\",\n      \"children\": [\n        {\n          \"name\": \"api\",\n          \"type\": \"folder\"\n        },\n        {\n          \"name\": \"test\",\n          \"type\": \"folder\"\n        },\n        {\n          \"name\": \"utils\",\n          \"type\": \"folder\"\n        }\n      ]\n    },\n    {\n      \"name\": \"extension.js\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \"extension.js.map\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \"src\",\n      \"type\": \"folder\",\n      \"children\": [\n        {\n          \"name\": \"test\",\n          \"type\": \"folder\"\n        },\n        {\n          \"name\": \"utils\",\n          \"type\": \"folder\",\n          \"children\": [\n            {\n              \"name\": \"api.utils.ts\",\n              \"type\": \"file\"\n            },\n            {\n              \"name\": \"utils.ts\",\n              \"type\": \"file\"\n            }\n          ]\n        },\n        {\n          \"name\": \"extension.ts\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \".eslintrc.json\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \".gitignore\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \".vscode-test.mjs\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \".vscodeignore\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"CHANGELOG.md\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"package-lock.json\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"package.json\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"README.md\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"tsconfig.json\",\n          \"type\": \"file\"\n        }\n      ]\n    }\n  ]\n}" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "## Extens√£o Poderosa (Sugest√£o)\n\nEste projeto parece ser uma extens√£o para o Visual Studio Code, desenvolvida em TypeScript, com um foco em funcionalidades de API e testes.\n\n## Tecnologias Utilizadas:\n\n- TypeScript\n- Node.js\n- Visual Studio Code API \n\n## Arquitetura do Projeto\n\n### src/ \n\nDiret√≥rio principal do c√≥digo-fonte da extens√£o.\n\n- `extension.ts`: Ponto de entrada principal da extens√£o.\n- `utils/`: Cont√©m fun√ß√µes utilit√°rias.\n    - `api.utils.ts`:  Utilit√°rios espec√≠ficos para intera√ß√£o com APIs.\n    - `utils.ts`: Utilit√°rios de prop√≥sito geral. \n- `test/`: Pasta para testes automatizados.\n\n### out/\n\nDiret√≥rio de sa√≠da da compila√ß√£o do TypeScript.\n\n- `api/`: Cont√©m a compila√ß√£o dos arquivos da pasta `src/api/`.\n- `test/`: Cont√©m a compila√ß√£o dos testes.\n- `utils/`: Cont√©m a compila√ß√£o dos utilit√°rios.\n\n### Arquivos da raiz\n\n- `.vscode/`: Configura√ß√µes espec√≠ficas do Visual Studio Code para o projeto.\n- `node_modules/`: Depend√™ncias do projeto gerenciadas pelo npm.\n- `extension.js`, `extension.js.map`:  Arquivos da extens√£o compilados. \n- `.eslintrc.json`: Configura√ß√µes do ESLint para estilo de c√≥digo.\n- `.gitignore`: Define arquivos e pastas a serem ignorados pelo Git.\n- `.vscode-test.mjs`: Arquivo de configura√ß√£o para testes no VS Code.\n- `.vscodeignore`: Define arquivos e pastas a serem ignorados pelo VS Code.\n- `CHANGELOG.md`: Registra as mudan√ßas em cada vers√£o do projeto.\n- `package-lock.json`, `package.json`: Gerenciamento de depend√™ncias e metadados do projeto.\n- `README.md`: Este arquivo, contendo a documenta√ß√£o do projeto.\n- `tsconfig.json`: Configura√ß√µes do compilador TypeScript. \n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "Considere acrescentar icones nos t√≠tulos a fim de deixar mais bonito visualmente" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "## üé® Entendi! Um toque visual faz toda a diferen√ßa! ‚ú®\n\nVou adicionar √≠cones aos t√≠tulos das se√ß√µes para deixar o README mais atraente. Usei emojis por serem universalmente suportados e adicionarem um toque divertido. üòâ\n\n**Veja como ficaria o exemplo anterior com os √≠cones:**\n\n## üöÄ Extens√£o Poderosa (Sugest√£o)\n\nEste projeto parece ser uma extens√£o para o Visual Studio Code, desenvolvida em TypeScript, com um foco em funcionalidades de API e testes.\n\n## üíª Tecnologias Utilizadas:\n\n- TypeScript\n- Node.js\n- Visual Studio Code API \n\n## üìÇ Arquitetura do Projeto\n\n### üìÅ src/ \n\nDiret√≥rio principal do c√≥digo-fonte da extens√£o.\n\n- `extension.ts`: Ponto de entrada principal da extens√£o.\n- `utils/` üß∞: Cont√©m fun√ß√µes utilit√°rias.\n    - `api.utils.ts`:  Utilit√°rios espec√≠ficos para intera√ß√£o com APIs.\n    - `utils.ts`: Utilit√°rios de prop√≥sito geral. \n- `test/` ‚úÖ: Pasta para testes automatizados.\n\n### üìÅ out/\n\nDiret√≥rio de sa√≠da da compila√ß√£o do TypeScript.\n\n- `api/`: Cont√©m a compila√ß√£o dos arquivos da pasta `src/api/`.\n- `test/`: Cont√©m a compila√ß√£o dos testes.\n- `utils/`: Cont√©m a compila√ß√£o dos utilit√°rios.\n\n### üìÑ Arquivos da raiz\n\n- `.vscode/` ‚öôÔ∏è: Configura√ß√µes espec√≠ficas do Visual Studio Code para o projeto.\n- `node_modules/` üì¶: Depend√™ncias do projeto gerenciadas pelo npm.\n- `extension.js`, `extension.js.map`:  Arquivos da extens√£o compilados. \n- `.eslintrc.json`: Configura√ß√µes do ESLint para estilo de c√≥digo.\n- `.gitignore`: Define arquivos e pastas a serem ignorados pelo Git.\n- `.vscode-test.mjs`: Arquivo de configura√ß√£o para testes no VS Code.\n- `.vscodeignore`: Define arquivos e pastas a serem ignorados pelo VS Code.\n- `CHANGELOG.md` üìë: Registra as mudan√ßas em cada vers√£o do projeto.\n- `package-lock.json`, `package.json` üì¶: Gerenciamento de depend√™ncias e metadados do projeto.\n- `README.md` üìÑ: Este arquivo, contendo a documenta√ß√£o do projeto.\n- `tsconfig.json` ‚öôÔ∏è: Configura√ß√µes do compilador TypeScript. \n\n**O que voc√™ achou? üòâ** \n\nLembre-se: Voc√™ pode personalizar os emojis de acordo com a sua prefer√™ncia ou com o tema do seu projeto. \n\n**Continue me enviando estruturas de projetos para testarmos!** üòÑ \n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "Leia esta outra estrutura:" },
                        { text: "{\n  \"folders\": [\n    {\n      \"name\": \".vscode\",\n      \"type\": \"folder\"\n    },\n    {\n      \"name\": \"node_modules\",\n      \"type\": \"folder\"\n    },\n    {\n      \"name\": \"out\",\n      \"type\": \"folder\",\n      \"children\": [\n        {\n          \"name\": \"api\",\n          \"type\": \"folder\"\n        },\n        {\n          \"name\": \"test\",\n          \"type\": \"folder\"\n        },\n        {\n          \"name\": \"utils\",\n          \"type\": \"folder\"\n        }\n      ]\n    },\n    {\n      \"name\": \"extension.js\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \"extension.js.map\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \"src\",\n      \"type\": \"folder\",\n      \"children\": [\n        {\n          \"name\": \"test\",\n          \"type\": \"folder\"\n        },\n        {\n          \"name\": \"utils\",\n          \"type\": \"folder\",\n          \"children\": [\n            {\n              \"name\": \"api.utils.ts\",\n              \"type\": \"file\"\n            },\n            {\n              \"name\": \"utils.ts\",\n              \"type\": \"file\"\n            }\n          ]\n        },\n        {\n          \"name\": \"extension.ts\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \".eslintrc.json\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \".gitignore\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \".vscode-test.mjs\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \".vscodeignore\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"CHANGELOG.md\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"package-lock.json\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"package.json\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"README.md\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"tsconfig.json\",\n          \"type\": \"file\"\n        }\n      ]\n    }\n  ]\n}" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "## ü§î Hum... Essa estrutura parece familiar! üëÄ\n\nA estrutura que voc√™ enviou √© **id√™ntica** √† anterior. \n\nQue tal experimentar com uma estrutura diferente para explorarmos outras possibilidades? üòÑ \n\nEnquanto isso, posso te dar algumas ideias de como incrementar o README da extens√£o, mesmo com a mesma estrutura:\n\n* **Badge de status da build:** Adicione um badge que mostre se a build da extens√£o est√° passando ou falhando (integrando com seu CI/CD).\n* **Capturas de tela:** Uma imagem vale mais que mil palavras! Adicione capturas de tela mostrando a extens√£o em a√ß√£o. \n* **Exemplo de uso:** Um exemplo simples de como usar a extens√£o pode ajudar os usu√°rios a come√ßarem rapidamente.\n* **Contribui√ß√£o:** Se o projeto for open-source, adicione uma se√ß√£o explicando como contribuir.\n\n**Estou pronto para gerar um novo README quando voc√™ estiver com uma nova estrutura!** üöÄ \n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "{\n  \"folders\": [\n    {\n      \"name\": \".github\",\n      \"type\": \"folder\",\n      \"children\": [\n        {\n          \"name\": \"workflows\",\n          \"type\": \"folder\",\n          \"children\": [\n            {\n              \"name\": \"build.yml\",\n              \"type\": \"file\"\n            },\n            {\n              \"name\": \"release.yml\",\n              \"type\": \"file\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"docs\",\n      \"type\": \"folder\",\n      \"children\": [\n        {\n          \"name\": \"images\",\n          \"type\": \"folder\"\n        },\n        {\n          \"name\": \"index.md\",\n          \"type\": \"file\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dist\",\n      \"type\": \"folder\"\n    },\n    {\n      \"name\": \"src\",\n      \"type\": \"folder\",\n      \"children\": [\n        {\n          \"name\": \"tests\",\n          \"type\": \"folder\"\n        },\n        {\n          \"name\": \"utils\",\n          \"type\": \"folder\",\n          \"children\": [\n            {\n              \"name\": \"api.utils.ts\",\n              \"type\": \"file\"\n            },\n            {\n              \"name\": \"utils.ts\",\n              \"type\": \"file\"\n            },\n            {\n              \"name\": \"constants.ts\",\n              \"type\": \"file\" \n            }\n          ]\n        },\n        {\n          \"name\": \"extension.ts\",\n          \"type\": \"file\"\n        },\n        {\n          \"name\": \"tsconfig.json\",\n          \"type\": \"file\"\n        }\n      ]\n    },\n    {\n      \"name\": \".eslintrc.js\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \".gitignore\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \".vscodeignore\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \"CHANGELOG.md\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \"package-lock.json\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \"package.json\",\n      \"type\": \"file\"\n    },\n    {\n      \"name\": \"README.md\",\n      \"type\": \"file\"\n    }\n  ]\n}" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "## ‚ú® Extens√£o Sofisticada (Sugest√£o) ‚ú®\n\nEste projeto aparenta ser uma extens√£o robusta para Visual Studio Code, escrita em TypeScript, com foco em boas pr√°ticas de desenvolvimento, como automa√ß√£o de build e release, documenta√ß√£o organizada e testes. \n\n## üíª Tecnologias Utilizadas:\n\n- TypeScript\n- Node.js\n- Visual Studio Code API\n\n## üìÇ Arquitetura do Projeto\n\n### üìÅ src/\n\nCont√©m o c√≥digo-fonte principal da extens√£o.\n\n- `extension.ts` üöÄ: Ponto de entrada principal da extens√£o.\n- `utils/` üß∞: Fun√ß√µes utilit√°rias.\n    - `api.utils.ts`: Utilit√°rios para intera√ß√£o com APIs.\n    - `utils.ts`: Utilit√°rios de prop√≥sito geral.\n    - `constants.ts`: Define constantes utilizadas na aplica√ß√£o. \n- `tests/` ‚úÖ: Pasta dedicada a testes automatizados.\n\n### üìÅ dist/\n\nDiret√≥rio para os arquivos da extens√£o prontos para distribui√ß√£o (ap√≥s build).\n\n### üìÅ docs/\n\nDocumenta√ß√£o do projeto.\n\n- `index.md`:  Arquivo principal da documenta√ß√£o.\n- `images/`: Imagens utilizadas na documenta√ß√£o.\n\n### üìÅ .github/workflows/\n\nFluxos de trabalho automatizados do GitHub Actions.\n\n- `build.yml`: Define o processo de build da extens√£o.\n- `release.yml`: Define o processo de release de novas vers√µes.\n\n### üìÑ Arquivos da raiz\n\n- `.eslintrc.js`: Configura√ß√µes do ESLint para estilo de c√≥digo.\n- `.gitignore`: Define arquivos e pastas ignorados pelo Git.\n- `.vscodeignore`: Define arquivos e pastas ignorados pelo VS Code.\n- `CHANGELOG.md` üìë: Hist√≥rico de mudan√ßas do projeto.\n- `package-lock.json`, `package.json` üì¶: Gerenciamento de depend√™ncias.\n- `README.md` üìÑ: Este arquivo, que voc√™ est√° lendo agora! üòä\n\n## Observa√ß√µes Adicionais\n\n- A presen√ßa de um diret√≥rio `docs/` sugere que a extens√£o possui documenta√ß√£o detalhada. Um link para a documenta√ß√£o seria um √≥timo complemento para este README. \n- A automa√ß√£o de build e release com GitHub Actions indica um processo de desenvolvimento maduro. \n\nEspero que este README seja um bom ponto de partida! üéâ" },
                    ],
                },
            ],
        });


        const result = await chatSession.sendMessage(jsonMsg);
        return result.response.text();

    }
}
